#! /usr/bin/env python

# plots and generates stats on a directory of plume text files
# requires loopSpeedMINX.py, speedyAltMINXdemo.py and postMINX.py
# NOTE: program expects the user to update loopSpeedMINX and this program to point at the appropriate folders
# remember to change the saveDirName into something sensible~

import os
import numpy as np
import loopSpeedMINX as sm

saveDirName = 'FW-GM_start00/ops_postCanFilt/plumeApr_Oct' #UPDATE THIS, FW-GM is firework, CF-GM is CFFEPS
curDir = os.getcwd()
saveDir = os.path.join(curDir, saveDirName)

plumeDir = os.path.join(curDir, 'plumesP50C60/plumesCan') #UPDATE THIS
pixDir = os.path.join(curDir, 'fpFuelFilt') # reference from all pixels generated by MINX (used for reference point of percentile). hotspots from fpFuelFilt should be canada only
timeStart = 00 # or 12, UPDATE THIS as needed

def toFloats(row):
    floats = map(float, row.split())
    return floats

def readFile(path):
    f = open(path, 'r')
    lines = f.readlines()
    f.close()
    return lines

plumePath = os.path.join(curDir, plumeDir)
tempList = os.listdir(plumePath)
plumeList= []
plmBandInd = 23
plmBandList = []
# make sure is only plumes, if maybePlume is plume, add to list
for ind, mPlume in enumerate(tempList):
    if mPlume.endswith('txt'):
        plumeList += [mPlume]
        if mPlume[plmBandInd] == 'B':
            plmBandList += 'B'
        else:
            plmBandList += 'R'

#print('The list of plumes is: ')
#print(plumeList)

# Maybe should clear the plumes first if accidentally included plumes with less than the pixel amount
pwrInd = 5
pixList = os.listdir(pixDir)
pwrs = []
for t in pixList:
    tLines = readFile(os.path.join(pixDir,t))
    for rowInd, row in enumerate(tLines, 4):
        if rowInd < len(tLines):
            pwrs += [toFloats(tLines[rowInd])[pwrInd]]

sm.makeDir(saveDir)
percentiles = [50,95,98]
distRanges = [[0,10],[10,30],[30,50],[50,500]]
distBins = [0,5,10,20,30,50,100]


# pass percentiles as the modifier
for pt in percentiles:
    savePtDir = os.path.join(saveDir, '{}_percentile'.format(pt))
    sm.makeDir(savePtDir)
    biomeDir = os.path.join(savePtDir, 'biomeBreakdown')
    fuelDir = os.path.join(savePtDir,'fuelBreakdown')
    pwrMax = np.percentile(pwrs, pt)
    print('pwrMax: {}'.format(pwrMax))
    plumes, plmHeights, plmModHeights, plmDists, plmBiomes, plmFuels, threshVal = sm.processPlumes(plumeDir, list(plumeList), plmBandList, pt=pt, minFRP=pwrMax, startTime = timeStart)
    print('Saved plumes for percentile: {}'.format(pt))
    try:
        sm.saveStats(savePtDir, plumes, plmHeights, plmModHeights, minFRP = pwrMax, threshVal=threshVal, modifier = '{}perc_'.format(pt))
        print('Saved stats for percentile: {}'.format(pt))
    except:
        print('Insufficient number of plumes to get stats.')
    try:
        sm.overallImages(plmDists, plmHeights, plmModHeights, pt, threshVal, savePtDir)
        print('Plotted basic images for percentile: {}'.format(pt))
        plmClean, modClean = sm.clean_inv(plmHeights, plmModHeights)
        sm.pltPlmHeightComp('pt',pt, plmClean, modClean, savePtDir, threshVal)
    except:
        print('Insufficient number of points to plot.')
    try:
        sm.distanceStats(plmHeights, plmModHeights, plmDists, distBins, savePtDir, modifier='_prct{}'.format(pt))
        print('Saved distance stats for percentile: {}'.format(pt))
    except:
        print('Insufficient number of points to run distance stats.')
    try:
        #TODO: Can potentially move this out, only really need the 98percentile
        sm.makeDir(biomeDir)
        sm.plotBiomes(biomeDir, plmBiomes, modifier='_prct{}'.format(pt))
        print('Plotted plumes by biomes.')
    except:
        print('Distances by biomes were not plotted.')
    try:
        sm.makeDir(fuelDir)
        sm.plotFuels(fuelDir, plmFuels, threshVal, pt, modifier='_prct{}'.format(pt))
    except:
        print('Distances by fuel type were not plotted.')
    try:
        sm.makeDir(fuelDir)
        sm.plotMonthFuels(plumes, fuelDir)
        print('Monthly fuel maps have been plotted')
    except:
        print('Failed to save monthly fuel maps')
    distanceDir = os.path.join(savePtDir, 'distancePlots')
    sm.makeDir(distanceDir)
    for dRange in distRanges:
        try:
            dPlmHeights, dPlmModHeights, dPlmDists = sm.filterPlmRange(dRange,plmHeights, plmModHeights, plmDists)
            sm.overallImages(dPlmDists, dPlmHeights, dPlmModHeights, threshVal, pt, distanceDir, modifier='_dist{}-{}'.format(dRange[0], dRange[1]))
            sm.saveStatsLite(distanceDir, 'N/A', dPlmHeights, dPlmModHeights, threshVal=threshVal, modifier='dist{}-{}'.format(dRange[0], dRange[1]))
        except:
            print('Did not save distance breakdown plot for dRange: {}'.format(dRange))
    print('All done! Please check to see plots and stats for percentile: {} have been generated correctly!'.format(pt))
