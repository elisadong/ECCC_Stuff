Despite repetition, I can ensure you that everything here is necessary. Please don't delete stuff if you don't know exactly what it does. 
That goes double for empty files.

You'll need to add this directory to your $PATH and $PYTHONPATH to have full and easy access to everything.
(See /fs/home/fs1/eccc/aq/arqi/nod001/.profile.d/interactive for an example)

If something isn't explained in this README, its probably either clutter, a work in progress, or not important, or all three,
just ignore those things.

-------------------------------------------------------------------------------------------------------

preMINX python script, idl .sav file and data/ directory, for use in automation of MINX4 plume height digitization.

For details and guide on this script and MINX4, see wiki page at:

https://wiki.cmc.ec.gc.ca/index.php?title=Dicksonn/MINX4

More detailed, line by line, explanation is available in the documentation inside preMINX file.

-------------------------------------------------------------------------------------------------------

postMINX python module, for reading and comparison of MINX4 results, CFFEPS/FireWorks Model output and CALIOP Lidar backscatter.

More detailed explanation of all functions is available in the __doc__ strings of each function.

Ex:
>>> import postMINX as pm
>>> help(pm.Plume)

A requirements.txt file exists in this directory to indicate which python packages are required for the full functionality of this module.
Install them by using `pip install -r requirements.txt`

-------------------------------------------------------------------------------------------------------

MISRutils python module, containing multiple utility functions for working with MISR terrain files.

Contains functions for converting from MISR Block, Line, Sample indices to the Space Oblique Mercator
Projection to a geographic longitude and latitude, as well functions for extracting Bidirectional
Radiance Factors from MISR terrain files and creating real-colour imagery from them.

Ex:
>>> import MISRutils as mu
>>> help(mu)

-------------------------------------------------------------------------------------------------------

testRPN.py python script, for learning of, playing with, and breaking usually, of rpnpy functions.

Has no functional use except for testing, although is great for referencing use of rpnpy functions.

-------------------------------------------------------------------------------------------------------

comp1, comp2 and comp3 python scripts, utilize postMINX to compare plume heights and NO2 v. NOx ratios in two ways, respectively.

Go ahead and execute them, they're short and cool, albeit not very friendly, so maybe don't look at their insides.

-------------------------------------------------------------------------------------------------------

CALIOP_intersect python script, for determining the time and location of MISR/CALIOP intersects which occur over MODIS hotspots.

More of a one time use thing, but if you wish to determine more up to date intersects you'll need to download the up to date TLE's
into the MINX/Comp/ directory.
This is even less friendly than the comp* scripts and also very broken, you were warned.

------------------------------------------------------------------------------------------------------

Cpoly C++ module, for the replacement of the python polygon_checking done in preMINX.py.

The functions were used often and all over, I felt the writing of a cpp extension was justified. But to be clear, it's not great.
I didn't really know what I was doing and it has been a while since I've written any C++. If it gives you literally any trouble at
all, just use the python implementation from preMINX.
Also, this only works for python3 and will NOT be backported. Get with the times man.

The use of both versions of these functions will eventually be docmented on some wiki somewhere maybe. 

-----------------------------------------------------------------------------------------------------

pyloader python module, for the displaying of loading messages and animations.

Very simple usage, see docstrings for easy examples. The whole thing works suprisingly well (sometimes), and also times the length of loading.

-----------------------------------------------------------------------------------------------------
